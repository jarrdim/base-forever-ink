import dotenv from 'dotenv';
import { ethers } from 'ethers';

dotenv.config();

async function main() {
    console.log('üöÄ Starting Guestbook contract deployment to Base Sepolia...\n');

    // Load environment variables
    const privateKey = process.env.PRIVATE_KEY;
    if (!privateKey) {
        console.error('‚ùå PRIVATE_KEY not found in .env file');
        process.exit(1);
    }

    // Setup provider for Base Sepolia
    const rpcUrl = 'https://sepolia.base.org';
    const provider = new ethers.JsonRpcProvider(rpcUrl);
    
    // Create wallet
    const wallet = new ethers.Wallet(privateKey, provider);
    console.log('üìù Deploying from address:', wallet.address);

    // Check balance
    const balance = await provider.getBalance(wallet.address);
    const balanceInEth = ethers.formatEther(balance);
    console.log('üí∞ Account balance:', balanceInEth, 'ETH');

    if (parseFloat(balanceInEth) < 0.0002) {
        console.log('‚ö†Ô∏è  Insufficient balance! Get test ETH from: https://www.coinbase.com/faucets/base-ethereum-sepolia-faucet');
        process.exit(1);
    }

    // Contract bytecode (compiled Guestbook.sol)
    const contractBytecode = "";

    try {
        // Get current gas price
        const feeData = await provider.getFeeData();
        console.log('Current gas price:', ethers.formatUnits(feeData.gasPrice, 'gwei'), 'gwei');
        
        // Estimate gas for deployment
        const gasLimit = 1500000; // Higher gas limit to prevent revert
        const gasPrice = feeData.gasPrice;
        
        // Calculate estimated cost
        const estimatedCost = BigInt(gasLimit) * gasPrice;
        const estimatedCostInEth = ethers.formatEther(estimatedCost);
        console.log('Estimated deployment cost:', estimatedCostInEth, 'ETH');
        
        // Check if cost is within budget ($0.20 equivalent)
        const maxCostInEth = 0.01; // Assuming ~$20/ETH, this is roughly $0.20
        if (parseFloat(estimatedCostInEth) > maxCostInEth) {
            console.log('‚ö†Ô∏è  Estimated cost exceeds budget. Adjusting gas settings...');
        }

        console.log('\nüîÑ Deploying contract...');
        
        // Deploy the contract
        const deployTx = await wallet.sendTransaction({
            data: contractBytecode,
            gasLimit: gasLimit,
            gasPrice: gasPrice
        });

        console.log('üì§ Transaction hash:', deployTx.hash);
        console.log('‚è≥ Waiting for deployment confirmation...');

        // Wait for deployment
        const receipt = await deployTx.wait();
        
        if (receipt.status === 1) {
            console.log('\n‚úÖ Contract deployed successfully!');
            console.log('üìç Contract address:', receipt.contractAddress);
            console.log('‚õΩ Gas used:', receipt.gasUsed.toString());
            console.log('üí∞ Actual cost:', ethers.formatEther(receipt.gasUsed * gasPrice), 'ETH');
            
            console.log('\nüìù Next steps:');
            console.log('1. Update src/lib/contract.ts with the new contract address:');
            console.log(`   GUESTBOOK_CONTRACT_ADDRESS = "${receipt.contractAddress}"`);
            console.log('2. Test the application with the deployed contract');
            
            return receipt.contractAddress;
        } else {
            console.error('‚ùå Deployment failed');
            process.exit(1);
        }

    } catch (error) {
        console.error('‚ùå Deployment error:', error.message);
        process.exit(1);
    }
}

main().catch(console.error);